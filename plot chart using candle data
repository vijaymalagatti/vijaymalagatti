import mysql.connector
from datetime import datetime
import plotly.graph_objects as go

# Establish a MySQL connection
connection = mysql.connector.connect(
    user='root',
    host='localhost',
    database='Eicho',
    passwd='Eicho@Botmudra'
)

cursor = connection.cursor()

try:
    # User input for date and time range
    user_date = input("Enter a Date (YYYY-MM-DD): ")
    end_date = input("Enter End Date (YYYY-MM-DD): ")
    start_time_str = input("Enter a Time (HH:MM:SS): ")
    end_time_str = input("Enter End Time (HH:MM:SS): ")

    start_time = datetime.strptime(start_time_str, "%H:%M:%S") if start_time_str else None
    end_time = datetime.strptime(end_time_str, "%H:%M:%S") if end_time_str else None

    # Construct the SQL query based on user input
    query = """
        SELECT D_Date, Time, Open, High, Low, Close
        FROM eicho.candle_data_gbpusd_2023_m15
        WHERE D_Date BETWEEN %s AND %s AND Time BETWEEN %s AND %s
    """
    cursor.execute(query, (user_date, end_date, start_time, end_time))

    # Fetch all the rows
    result = cursor.fetchall()

    column_names = [desc[0] for desc in cursor.description]

    # Convert the MySQL result to a list of dictionaries
    data = []
    for row in result:
        datetime_str = f"{row[column_names.index('D_Date')]} {row[column_names.index('Time')]}"  # Combine date and time
        timestamp = datetime.strptime(datetime_str, "%Y-%m-%d %H:%M:%S")
        data.append({
            'Time': timestamp,
            'Open': row[column_names.index('Open')],
            'High': row[column_names.index('High')],
            'Low': row[column_names.index('Low')],
            'Close': row[column_names.index('Close')],
        })

    # Create candlestick chart
    fig = go.Figure(data=[go.Candlestick(x=[entry['Time'] for entry in data],
                                         open=[entry['Open'] for entry in data],
                                         high=[entry['High'] for entry in data],
                                         low=[entry['Low'] for entry in data],
                                         close=[entry['Close'] for entry in data])])

    # Update layout
    fig.update_layout(xaxis_rangeslider_visible=False,
                      title=f'Candlestick Chart for {user_date}',
                      xaxis_title='Time',
                      yaxis_title='Price')

    # Show the plot
    fig.show()

except mysql.connector.Error as err:
    print(f"Error: {err}")

finally:
    # Close the cursor and connection
    cursor.close()
    connection.close()
